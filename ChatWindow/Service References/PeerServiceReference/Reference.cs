//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Peer2PeerChat.PeerServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PeerServiceReference.IPeerService")]
    public interface IPeerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPeerService/registerPeer", ReplyAction="http://tempuri.org/IPeerService/registerPeerResponse")]
        bool registerPeer(string hash, System.Uri clientUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPeerService/registerPeer", ReplyAction="http://tempuri.org/IPeerService/registerPeerResponse")]
        System.Threading.Tasks.Task<bool> registerPeerAsync(string hash, System.Uri clientUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPeerService/kickoutPeer", ReplyAction="http://tempuri.org/IPeerService/kickoutPeerResponse")]
        bool kickoutPeer(string hash, string kickerHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPeerService/kickoutPeer", ReplyAction="http://tempuri.org/IPeerService/kickoutPeerResponse")]
        System.Threading.Tasks.Task<bool> kickoutPeerAsync(string hash, string kickerHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPeerService/getPeerList", ReplyAction="http://tempuri.org/IPeerService/getPeerListResponse")]
        System.Uri[] getPeerList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPeerService/getPeerList", ReplyAction="http://tempuri.org/IPeerService/getPeerListResponse")]
        System.Threading.Tasks.Task<System.Uri[]> getPeerListAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPeerServiceChannel : Peer2PeerChat.PeerServiceReference.IPeerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PeerServiceClient : System.ServiceModel.ClientBase<Peer2PeerChat.PeerServiceReference.IPeerService>, Peer2PeerChat.PeerServiceReference.IPeerService {
        
        public PeerServiceClient() {
        }
        
        public PeerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PeerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PeerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PeerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool registerPeer(string hash, System.Uri clientUri) {
            return base.Channel.registerPeer(hash, clientUri);
        }
        
        public System.Threading.Tasks.Task<bool> registerPeerAsync(string hash, System.Uri clientUri) {
            return base.Channel.registerPeerAsync(hash, clientUri);
        }
        
        public bool kickoutPeer(string hash, string kickerHash) {
            return base.Channel.kickoutPeer(hash, kickerHash);
        }
        
        public System.Threading.Tasks.Task<bool> kickoutPeerAsync(string hash, string kickerHash) {
            return base.Channel.kickoutPeerAsync(hash, kickerHash);
        }
        
        public System.Uri[] getPeerList() {
            return base.Channel.getPeerList();
        }
        
        public System.Threading.Tasks.Task<System.Uri[]> getPeerListAsync() {
            return base.Channel.getPeerListAsync();
        }
    }
}
